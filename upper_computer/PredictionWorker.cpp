#include "PredictionWorker.h"
#include "SpectrumPredictor.h"
#include <QDebug>
#include <QMap>
#include <QString>
#include <QThread>

PredictionWorker::PredictionWorker(QObject *parent)
    : QObject(parent), predictor_(nullptr)
{
}

PredictionWorker::~PredictionWorker()
{
    // Ê∏ÖÁêÜËµÑÊ∫ê
    if (predictor_) {
        predictor_ = nullptr;
    }
}

void PredictionWorker::setPredictor(SpectrumPredictor* predictor)
{
    predictor_ = predictor;
}

void PredictionWorker::performPrediction(const std::vector<float>& spectrum)
{
    qDebug() << "=== ÂÖâË∞±È¢ÑÊµãÂºÄÂßã ===";
    qDebug() << "È¢ÑÊµãÁ∫øÁ®ãID:" << QThread::currentThreadId();
    qDebug() << "ÂÖâË∞±Êï∞ÊçÆÁÇπÊï∞:" << spectrum.size();
    
    if (!predictor_) {
        qDebug() << "‚ùå È¢ÑÊµãÂô®‰∏∫Á©∫ÔºåÊó†Ê≥ïÊâßË°åÈ¢ÑÊµã";
        emit predictionError("È¢ÑÊµãÂô®Êú™ÂàùÂßãÂåñ");
        return;
    }

    try {
        qDebug() << "üöÄ ÂºÄÂßãÊâßË°åLibTorchÈ¢ÑÊµã...";
        
        // ÊòæÁ§∫ÂÖâË∞±Êï∞ÊçÆÁöÑÂâçÂá†‰∏™ÂÄºÁî®‰∫éË∞ÉËØï
        if (spectrum.size() > 0) {
            QString spectrumPreview = "ÂÖâË∞±Êï∞ÊçÆÈ¢ÑËßà: [";
            for (size_t i = 0; i < std::min(spectrum.size(), size_t(5)); ++i) {
                spectrumPreview += QString::number(spectrum[i], 'f', 3);
                if (i < std::min(spectrum.size(), size_t(5)) - 1) {
                    spectrumPreview += ", ";
                }
            }
            spectrumPreview += "...]";
            qDebug() << spectrumPreview;
        }
        
        // ÊâßË°åÈ¢ÑÊµã
        auto results = predictor_->predict(spectrum);
        
        qDebug() << "‚úÖ LibTorchÈ¢ÑÊµãÊâßË°åÂÆåÊàê";
        qDebug() << "üìä È¢ÑÊµãÁªìÊûúËØ¶ÊÉÖ:";
        
        // ËΩ¨Êç¢‰∏∫QMapÊ†ºÂºèÂπ∂ÊòæÁ§∫ËØ¶ÁªÜÁªìÊûú
        QMap<QString, float> qResults;
        for (const auto& pair : results) {
            qResults[QString::fromStdString(pair.first)] = pair.second;
            qDebug() << QString("  %1: %2").arg(QString::fromStdString(pair.first)).arg(pair.second, 0, 'f', 4);
        }
        
        qDebug() << "üìà È¢ÑÊµãÁªìÊûúÁªüËÆ°:";
        qDebug() << "  - ÁªìÊûúÊï∞Èáè:" << qResults.size();
        if (!qResults.isEmpty()) {
            float minVal = *std::min_element(qResults.begin(), qResults.end());
            float maxVal = *std::max_element(qResults.begin(), qResults.end());
            qDebug() << "  - ÊúÄÂ∞èÂÄº:" << minVal;
            qDebug() << "  - ÊúÄÂ§ßÂÄº:" << maxVal;
        }
        
        // ÂèëÂá∫È¢ÑÊµãÂÆåÊàê‰ø°Âè∑
        emit predictionCompleted(qResults);
        qDebug() << "üì° È¢ÑÊµãÂÆåÊàê‰ø°Âè∑Â∑≤ÂèëÂá∫";
        qDebug() << "=== ÂÖâË∞±È¢ÑÊµãÁªìÊùü ===";
        
    } catch (const std::exception& e) {
        qDebug() << "‚ùå È¢ÑÊµãËøáÁ®ã‰∏≠ÂèëÁîüÂºÇÂ∏∏:" << e.what();
        emit predictionError(QString("È¢ÑÊµãÂ§±Ë¥•: %1").arg(e.what()));
        qDebug() << "=== ÂÖâË∞±È¢ÑÊµãÂºÇÂ∏∏ÁªìÊùü ===";
    }
}
